#include<graphics.h>
#include<conio.h>
#include <windows.h>

const int WIDTH = 600;
const int HEIGHT = 800;
const int PLAYER_SIZE = 30;
const int PLATFORM_WIDTH = 100;

IMAGE imgbackground;
IMAGE imgplayer1;
IMAGE imgplayer2;
IMAGE imgplatform;

bool isleft = false;

struct platform {
    int x, y;
};
struct player {
    int x, y;
    float velocity;
};

player person;
platform platforms[10];

void putimagePNG(int x, int y, IMAGE* picture) {
    DWORD* dst = GetImageBuffer();    // Get the screen buffer pointer
    DWORD* draw = GetImageBuffer(picture);    // Get the image buffer pointer

    int picture_width = picture->getwidth();
    int picture_height = picture->getheight();

    for (int iy = 0; iy < picture_height; iy++) {
        for (int ix = 0; ix < picture_width; ix++) {
            int srcX = x + ix;
            int srcY = y + iy;

            if (srcX >= 0 && srcX < WIDTH && srcY >= 0 && srcY < HEIGHT) {
                int alpha = (draw[iy * picture_width + ix] & 0xff000000) >> 24;
                if (alpha == 255) {
                    dst[srcY * WIDTH + srcX] = draw[iy * picture_width + ix];
                }
                else if (alpha != 0) {
                    unsigned char r = GetRValue(draw[iy * picture_width + ix]);
                    unsigned char g = GetGValue(draw[iy * picture_width + ix]);
                    unsigned char b = GetBValue(draw[iy * picture_width + ix]);
                    unsigned char r1 = GetRValue(dst[srcY * WIDTH + srcX]);
                    unsigned char g1 = GetGValue(dst[srcY * WIDTH + srcX]);
                    unsigned char b1 = GetBValue(dst[srcY * WIDTH + srcX]);
                    dst[srcY * WIDTH + srcX] = RGB(
                        (r * alpha + r1 * (255 - alpha)) / 255,
                        (g * alpha + g1 * (255 - alpha)) / 255,
                        (b * alpha + b1 * (255 - alpha)) / 255
                    );
                }
            }
        }
    }
}

void initialize() {
    initgraph(WIDTH,HEIGHT);

    loadimage(&imgbackground, L"tietu/beijing.jpg");
    loadimage(&imgplatform, L"tietu/jieti.jpg");
    loadimage(&imgplayer1, L"tietu/wusaqi1.png");
    loadimage(&imgplayer2, L"tietu/wusaqi2.png");

   person = { WIDTH / 2,HEIGHT/2 ,0 };

   isleft = false;

   for (int i = 0; i < 10; i++) {
       platforms[i] = {
           rand() % (WIDTH - 100),
           HEIGHT - i * 80
       };
   }
}

void draw() {
    putimage(0, 0, &imgbackground);
   
    for (platform p : platforms) {
        putimage(p.x, p.y,  PLATFORM_WIDTH, 20,&imgplatform,0,0);
    }
    
    if (isleft) {
        putimagePNG(person.x - PLAYER_SIZE / 2, person.y - PLAYER_SIZE / 2, &imgplayer1);
    }
    else
    {
        putimagePNG(person.x - PLAYER_SIZE / 2, person.y - PLAYER_SIZE / 2, &imgplayer2);
    }
   
    Sleep(10);
}

void update() {
    if (GetAsyncKeyState(VK_LEFT)) {
        person.x -= 5;
        isleft = true;
    }
    if (GetAsyncKeyState(VK_RIGHT)) {
        person.x += 5;
        isleft = false;
    }
    person.velocity += 0.5;
    person.y += person.velocity;

    for (platform& p : platforms) {
        if (person.y + PLAYER_SIZE/2 > p.y &&
            person.y + PLAYER_SIZE / 2 < p.y + 20 &&
            person.x > p.x - PLAYER_SIZE / 2 &&
            person.x < p.x + PLATFORM_WIDTH + PLAYER_SIZE / 2)
        {
            person.velocity = -15;
        }
    }
    if (person.y < HEIGHT / 2)
    {
        person.y = HEIGHT / 2;
        for (platform& p : platforms) {
            p.y += 5;
            if (p.y > HEIGHT)
                p = { rand() % (WIDTH - 100),0 };

        }
    }
    if (person.y > HEIGHT) {
        person = { WIDTH / 2, HEIGHT/2, 0 }; 
        for (int i = 0; i < 10; i++) {         
            platforms[i] = { rand() % (WIDTH - 100), HEIGHT - i * 80 };
        }
    }
}

int main()
{
    initialize();

    while (!_kbhit()) {
        update();
        draw();
    }
    closegraph();
    return 0;
}
